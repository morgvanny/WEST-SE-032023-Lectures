# 1.✅ Update our models to include a One to Many association
# Pet >- Owner

# Import ForeignKey
from sqlalchemy import (PrimaryKeyConstraint, Column,
                        String, Integer, Float,  DateTime, ForeignKey)

# import relationship and backref from sqlalchemy.orm
from sqlalchemy.orm import (relationship, backref)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Pet(Base):
    __tablename__ = 'pets'
    __table_args__ = (PrimaryKeyConstraint('id'),)

    id = Column(Integer())
    name = Column(String())
    species = Column(String())
    breed = Column(String())
    temperament = Column(String())

    # 1.a✅ Add  ForeignKey('owners.id') to owner)id
    owner_id = Column(Integer(), ForeignKey('owners.id'))

    def __repr__(self):
        return f"Id: {self.id}, " \
            + f"Name: {self.name}, " \
            + f"Species: {self.species}, "\
            + f"Breed: {self.breed}, "\
            + f"Species: {self.temperament}"

# 1.b✅ Add an Owners table


class Owner(Base):
    __tablename__ = 'owners'
    __table_args__ = (PrimaryKeyConstraint('id'),)

    id = Column(Integer())
    name = Column(String())
    email = Column(String())
    phone = Column(Integer())
    address = Column(String())

    # Create the following columns
    # id -> type integer
    # name -> type string
    # email -> type string
    # phone -> type int
    # address -> type string

    # 1.c✅ Associate the Pet model with the owner Model
    relationship('Pet', backref=backref('pet'))

    def __repr__(self):
        return f"Id: {self.id}, " \
            + f"Name: {self.name}, " \
            + f"Email: {self.email}, "\
            + f"Phone: {self.phone}, "\
            + f"Address: {self.address}"

    # add a __repr__ method that returns a string containing the id, name, email, phone and address of our class

# 2.✅ Update your migrations by running `alembic revision --autogenerate -m` and `alembic upgrade head`

    # Note: If you still have your database from the previous lecture, you'll need to create a migration to update the pets table
    # After running your migrations, go build out some seeds and test your one-to-many with debug.py
# -------------------------------

# 4.✅ Update our Model to have a Many to Many association
# Pet-< Jobs >- Handlers

# Create a Handlers table

    # Create the following columns
    # id -> type integer
    # name -> type string
    # email -> type string
    # phone -> type int
    # hourly_rate -> type float

   # add a __repr__ method that returns a string containing the id, name, email, phone and hourly_rate of our class

# Create a "jobs" table to serve as our join

    # Create the following columns
    # id -> type integer
    # request -> type string
    # data -> type datetime
    # fee -> type float
    # pet_id -> type int with a ForeignKey('pet.id')
    # handler_id -> type int with a ForeignKey('handlers.id')

    # Associate the models with relationship(<ModelNameHere>, backref=backref(<TableNameHere>))

    # Add a __repr__ method that returns a string containing the id, request, date, notes, fee, pet_id and handler_id of our class


# 5.✅ Update your migrations by running `alembic revision --autogenerate -m` and `alembic upgrade head`

# After running your migrations, go build out some seeds and test your many to many with debug.py



from faker import Faker
import random

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from models import Pet, Owner

if __name__ == '__main__':
    engine = create_engine('sqlite:///pet_app.db')
    Session = sessionmaker(bind=engine)
    session = Session()
# 2.a ✅ Add delete methods for Pet and Owner to clear the database before each seeding

    session.query(Pet).delete()
    session.query(Owner).delete()
# ----------
# 5.✅ Add Delete methods for Job and Handler

    # Initialize faker

    fake = Faker()

    # Create an array for species with "CAT" and "Dog"

    species = ["Cat", "Dog"]

    # Create an array of cat breeds

    cat_breeds = ["Siamese", "Sphynx", "Burmese",
                  "Domestic long hair", "Domestic short hair"]

    # Create an array of dog breeds

    dog_breeds = ["Husky", "Poodle", "Chihuahua",
                  "Corgi", "Australian Shepherd", "Bulldog"]

    # Create an array of temperaments
    temperaments = ["Happy", "Calm", "Excited", "Aggressive", "Nervous"]
    # Create an empty array for owners
    owners = []
    pets = []
    # Create a for loop that iterates 50 times
    for _ in range(50):
        owner = Owner(
            name=f"{fake.first_name()} {fake.last_name()}",
            email=fake.email(),
            phone=random.randint(1000000, 9999999),
            address=fake.address()
        )
    # Create an owner using data from faker
        session.add(owner)
        session.commit()
        owners.append(owner)

    # Use .add and .commit to save the owner one at a time, so we maintain the owner ID in our instance.

    # Append the owner to the owners array

    # Create an empty pets array

    for owner in owners:
        for _ in range(random.randint(1, 3)):
            species = random.choice(species)
            pet = Pet(
                name=fake.name(),
                species=species,
                breed=random.choice(
                    cat_breeds) if species == "Cat" else random.choice(dog_breeds),
                temperament=random.choice(temperaments),
                owner_id=owner.id
            )
            session.add(pet)
            session.commit()
            pets.append(pet)

    # Create a for loop that iterates over the owners array

    # Create a for loop that iterates 1 - 3 times

    # Use faker and the species, cat breeds, dog breeds and temperament array to create a pet

    # Use .add and .commit to save the pet to the database

    # Append the pet to the pets array

# 3✅ run the seed file and head over to debug.py to test out your one to many
# -----------------------------------------------------

# 5.✅ Create a empty array set to handlers

    # Create a for loop that iterates 50 times

    # Create a handler with faker data

    # Use .add and .commit to save the handler to the database

    # Append handler to handlers

    # Create an array of requests, "Walk", "Drop-in" and "Boarding"

    # Create an empty array and set it to jobs

    # Create a for loop that iterates over the handlers array

    # Create a for loop that iterates 1 - 10 times

    # Create a Job using faker, the request array and pets array

    # append the job to the jobs array

    # Bulk save the jobs (we wont need their id)

    session.commit()
    session.close()

# 6.✅ Run the seeds file and head over to debug.py to test out your Many to Many
